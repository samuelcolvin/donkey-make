use std::fs;
use std::io::Write;
use std::path::Path;
use std::process;
use std::os::unix::fs::PermissionsExt;

static PATH_STR: & str = ".donkey.tmp";

fn create_file(path: &Path, content: &str) -> std::io::Result<()> {
    let mut f = fs::File::create(path)?;
    f.write_all(content.as_bytes())?;

    let mut perms = f.metadata()?.permissions();
    let mode = perms.mode();
    perms.set_mode(mode | 0o100);
    f.set_permissions(perms)?;
    return Ok(())
}

pub fn write(command_name: &str, command: &Vec<String>) {
    let path = Path::new(PATH_STR);
    if path.exists() {
        exit!(
            "Error writing temporary file:\n  {} already exists, donkey-must be running already",
            PATH_STR
        );
    }

    let content = format!(r#"# !/usr/bin/env bash
# =======================================================================================
# This is a temporary file generated by donkey-make to execute command: "{}"
# This file should only exist very temporarily while it's be executed
# DO NOT EDIT THIS FILE!
# =======================================================================================
{}
"#, command_name, command.join("\n"));

    match create_file(path, &content) {
        Ok(t) => t,
        Err(e) => {
            exit!("Error writing temporary file {}:\n  {}", PATH_STR, e);
        }
    };
}

pub fn delete() {
    let path = Path::new(PATH_STR);
    match fs::remove_file(path) {
        Ok(t) => t,
        Err(e) => {
            exit!("Error deleting temporary file {}, {}", PATH_STR, e);
        }
    };
}
